#!/usr/bin/env python3
"""
Quick test to verify Pizza aggregate with state separation works correctly
"""

import sys
from decimal import Decimal
from pathlib import Path

# Add paths
project_root = Path(__file__).parent.parent.parent.parent.parent
sys.path.insert(0, str(project_root / "src"))
sys.path.insert(0, str(Path(__file__).parent.parent))

print("=" * 70)
print("üß™ Testing Pizza Aggregate with State Separation")
print("=" * 70)

try:
    # Import Pizza and related classes
    print("\n1Ô∏è‚É£  Importing Pizza and PizzaSize...")
    from domain.entities.enums import PizzaSize
    from domain.entities.pizza import Pizza

    print("   ‚úÖ Imports successful")

    # Test Pizza creation
    print("\n2Ô∏è‚É£  Creating a Margherita pizza...")
    pizza = Pizza(
        name="Margherita",
        base_price=Decimal("12.99"),
        size=PizzaSize.LARGE,
        description="Classic pizza with tomatoes, mozzarella, and basil",
    )
    print(f"   ‚úÖ Pizza created with ID: {pizza.id()}")

    # Test state access
    print("\n3Ô∏è‚É£  Testing state access...")
    print(f"   ‚Ä¢ pizza.state.name = {pizza.state.name}")
    print(f"   ‚Ä¢ pizza.state.size = {pizza.state.size}")
    print(f"   ‚Ä¢ pizza.state.base_price = {pizza.state.base_price}")
    print(f"   ‚Ä¢ pizza.state.toppings = {pizza.state.toppings}")
    print(f"   ‚Ä¢ pizza.state.description = {pizza.state.description}")
    print("   ‚úÖ State access working correctly")

    # Test computed properties
    print("\n4Ô∏è‚É£  Testing computed properties...")
    print(f"   ‚Ä¢ pizza.size_multiplier = {pizza.size_multiplier}")
    print(f"   ‚Ä¢ pizza.topping_price = ${pizza.topping_price}")
    print(f"   ‚Ä¢ pizza.total_price = ${pizza.total_price}")
    print("   ‚úÖ Computed properties working correctly")

    # Test add_topping method
    print("\n5Ô∏è‚É£  Testing add_topping() method...")
    pizza.add_topping("extra cheese")
    pizza.add_topping("basil")
    print(f"   ‚Ä¢ Toppings after adding: {pizza.state.toppings}")
    print(f"   ‚Ä¢ New total price: ${pizza.total_price}")
    print("   ‚úÖ add_topping() working correctly")

    # Test remove_topping method
    print("\n6Ô∏è‚É£  Testing remove_topping() method...")
    pizza.remove_topping("extra cheese")
    print(f"   ‚Ä¢ Toppings after removing: {pizza.state.toppings}")
    print(f"   ‚Ä¢ New total price: ${pizza.total_price}")
    print("   ‚úÖ remove_topping() working correctly")

    # Test domain events
    print("\n7Ô∏è‚É£  Testing domain events...")
    events = pizza.get_uncommitted_events()
    print(f"   ‚Ä¢ Number of domain events raised: {len(events)}")
    for i, event in enumerate(events, 1):
        print(f"     {i}. {type(event).__name__}")
    print("   ‚úÖ Domain events working correctly")

    # Test __str__ method
    print("\n8Ô∏è‚É£  Testing __str__() method...")
    print(f"   ‚Ä¢ String representation: {pizza}")
    print("   ‚úÖ __str__() working correctly")

    # Test that state is separate from aggregate
    print("\n9Ô∏è‚É£  Verifying state separation...")
    print(f"   ‚Ä¢ Type of pizza: {type(pizza).__name__}")
    print(f"   ‚Ä¢ Type of pizza.state: {type(pizza.state).__name__}")
    print(f"   ‚Ä¢ pizza.state is an AggregateState: {hasattr(pizza.state, 'state_version')}")
    print(f"   ‚Ä¢ State version: {pizza.state.state_version}")
    if hasattr(pizza.state, "created_at") and pizza.state.created_at is not None:
        print(f"   ‚Ä¢ State created_at: {pizza.state.created_at}")
    print("   ‚úÖ State separation verified")

    # Test state ID matches aggregate ID
    print("\nüîü Verifying ID consistency...")
    print(f"   ‚Ä¢ pizza.id(): {pizza.id()}")
    print(f"   ‚Ä¢ pizza.state.id: {pizza.state.id}")
    print(f"   ‚Ä¢ IDs match: {pizza.id() == pizza.state.id}")
    print("   ‚úÖ ID consistency verified")

    print("\n" + "=" * 70)
    print("üéâ All Pizza aggregate tests PASSED!")
    print("=" * 70)
    print("\n‚úÖ State separation is working correctly!")
    print("‚úÖ All methods accessing state via self.state.*")
    print("‚úÖ Computed properties work as expected")
    print("‚úÖ Domain events are being raised")
    print("‚úÖ The Pizza aggregate is ready for use!")

except Exception as e:
    print(f"\n‚ùå Test FAILED with error:")
    print(f"   {type(e).__name__}: {e}")
    import traceback

    print("\nFull traceback:")
    traceback.print_exc()
    sys.exit(1)
