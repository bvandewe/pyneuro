#!/bin/bash
#
# PyNeuroctl Shell Wrapper
#
# This script provides a shell wrapper around the Python CLI tool, ensuring
# it runs in the proper environment with all necessary dependencies.

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get script directory (where this script is located)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Project root directory (parent of scripts directory)
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Python CLI tool path
CLI_TOOL="$PROJECT_ROOT/src/cli/pyneuroctl.py"

# Function to print colored output
print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to find Python executable
find_python() {
    # Check for different Python versions in order of preference
    for python_cmd in python3.11 python3.10 python3.9 python3.8 python3 python; do
        if command_exists "$python_cmd"; then
            # Verify it's Python 3.8+
            if "$python_cmd" -c "import sys; exit(0 if sys.version_info >= (3, 8) else 1)" 2>/dev/null; then
                echo "$python_cmd"
                return 0
            fi
        fi
    done
    return 1
}

# Function to check Poetry installation
check_poetry() {
    if command_exists poetry; then
        return 0
    else
        return 1
    fi
}

# Function to setup Python environment
setup_environment() {
    cd "$PROJECT_ROOT"
    
    # Check if we're in a Poetry project
    if [ -f "pyproject.toml" ] && check_poetry; then
        print_info "Using Poetry environment"
        
        # Check if virtual environment is activated
        if [ -z "$VIRTUAL_ENV" ]; then
            print_info "Activating Poetry virtual environment"
            # Use poetry run to execute in the proper environment
            PYTHON_CMD="poetry run python"
        else
            PYTHON_CMD="python"
        fi
    else
        # Find Python executable
        PYTHON_CMD=$(find_python)
        if [ $? -ne 0 ]; then
            print_error "Python 3.8+ not found. Please install Python 3.8 or higher."
            exit 1
        fi
        
        print_info "Using Python: $PYTHON_CMD"
        
        # Check if required packages are available
        if ! "$PYTHON_CMD" -c "import argparse, json, subprocess" 2>/dev/null; then
            print_error "Required Python packages not found."
            print_info "Please install the Neuroglia framework dependencies"
            exit 1
        fi
    fi
}

# Function to validate project structure
validate_project() {
    if [ ! -f "$CLI_TOOL" ]; then
        print_error "CLI tool not found at: $CLI_TOOL"
        print_info "Make sure you're running this from the correct project directory"
        exit 1
    fi
    
    if [ ! -d "$PROJECT_ROOT/samples" ]; then
        print_warning "Samples directory not found. Some features may not work."
    fi
    
    if [ ! -d "$PROJECT_ROOT/src/neuroglia" ]; then
        print_error "Neuroglia source code not found. Please check project structure."
        exit 1
    fi
}

# Function to show help if no arguments
show_help_if_empty() {
    if [ $# -eq 0 ]; then
        print_info "PyNeuroctl - Neuroglia Python Framework CLI"
        echo
        exec $PYTHON_CMD "$CLI_TOOL" --help
    fi
}

# Function to handle special commands
handle_special_commands() {
    case "$1" in
        --version|-v)
            print_info "PyNeuroctl Shell Wrapper"
            print_info "Part of Neuroglia Python Framework"
            echo
            exec $PYTHON_CMD "$CLI_TOOL" list
            ;;
        --help|-h)
            exec $PYTHON_CMD "$CLI_TOOL" --help
            ;;
        doctor)
            print_info "Running PyNeuroctl system check..."
            echo
            print_info "🔍 Project Structure:"
            echo "  Project Root: $PROJECT_ROOT"
            echo "  CLI Tool: $CLI_TOOL"
            echo "  Samples Dir: $PROJECT_ROOT/samples"
            echo
            
            print_info "🐍 Python Environment:"
            $PYTHON_CMD --version
            echo "  Python Path: $(which $PYTHON_CMD)"
            echo
            
            if check_poetry; then
                print_success "Poetry is available"
                poetry --version
            else
                print_warning "Poetry not found (optional)"
            fi
            echo
            
            print_info "📦 Dependencies:"
            if $PYTHON_CMD -c "import argparse, json, subprocess" 2>/dev/null; then
                print_success "Core dependencies available"
            else
                print_error "Missing required dependencies"
            fi
            
            echo
            print_info "🧪 Samples:"
            if [ -d "$PROJECT_ROOT/samples" ]; then
                sample_count=$(find "$PROJECT_ROOT/samples" -maxdepth 1 -type d | wc -l)
                print_success "Found $((sample_count - 1)) sample directories"
            else
                print_warning "No samples directory found"
            fi
            
            exit 0
            ;;
    esac
}

# Main execution function
main() {
    # Handle special commands first
    if [ $# -gt 0 ]; then
        handle_special_commands "$1"
    fi
    
    # Show help if no arguments
    show_help_if_empty "$@"
    
    # Validate project structure
    validate_project
    
    # Setup Python environment
    setup_environment
    
    # Add project root to Python path for imports
    export PYTHONPATH="$PROJECT_ROOT/src:$PYTHONPATH"
    
    # Execute the CLI tool with all arguments
    exec $PYTHON_CMD "$CLI_TOOL" "$@"
}

# Error handling
trap 'print_error "Script interrupted"; exit 130' INT
trap 'print_error "Script terminated"; exit 143' TERM

# Run main function with all arguments
main "$@"