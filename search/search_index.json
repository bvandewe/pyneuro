{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Neuroglia Python Framework","text":"<p>This Python framework is a lightweight layer built on top of FastAPI. It offers developers a set of useful tools and features that can be applied to any microservice, no matter its specific purpose or domain. These features include:</p> <ul> <li>Adherence to 12-Factor App principles: We've built the framework to follow the best practices outlined in the 12-factor methodology.</li> <li>Built-in MVC Web App structure: It provides a foundation for building web applications using the Model-View-Controller pattern, with essential abstractions.</li> <li>Simplified Dependency Injection: A straightforward mechanism for managing dependencies, including automatic discovery and instantiation of classes.</li> <li>Class-based API Controllers with Automatic Loading: Easily define API controllers using classes, with the framework automatically finding and loading them.</li> <li>Modular Command/Query Separation (CQRS): Supports a clear separation of commands (actions that change data) and queries (actions that retrieve data).</li> <li>Optional Event-Sourcing: Provides the option to implement event-sourcing for building event-driven domain models.</li> <li>Clean, Layered Code: Encourages a clean architecture approach, similar to the principles outlined in [link to clean architecture article].</li> <li>Pure Domain Models: Allows you to define domain models that are independent of any specific persistence mechanism.</li> <li>Application Handlers: Provides a structure for handling commands, queries, events, and background tasks within your application logic.</li> <li>Repository Pattern Implementation: Includes support for the Repository pattern for abstracting data access.</li> <li>Separation of API and Domain: Keeps API controllers, endpoints, and data transfer objects (DTOs) separate from your core domain models and business logic.</li> <li>Native Asynchronous Event Handling with RxPy: Offers built-in support for handling, emitting, and ingesting asynchronous events (in JSON CloudEvent format) using the ReactiveX programming paradigm with RxPy.</li> <li>Data Model Mapping: Provides tools for easily mapping data between your domain models and integration layers.</li> <li>Easy Background Task Scheduling: Integrates seamlessly with apscheduler for scheduling background tasks.</li> <li>And more...</li> </ul> <p>The codebase is generally well-commented to help you understand its functionality.</p> <p>The main entry point of your application is typically the <code>src/main.py</code> file. This file is where you define all the necessary dependencies and specify the sub-folders where the framework should dynamically load your API, Application, Persistence, and Domain layers.</p> <p>When the web application starts, it automatically discovers, identifies, and instantiates the necessary dependencies. It then loads:</p> <ul> <li>API Controllers: Defines the routes and maps each endpoint to its corresponding Application handler.</li> <li>Application Handlers and Services: Loads the logic for handling commands, queries, events, tasks, and any other business logic services.</li> <li>Integration Dependencies: Loads any external API client services, persistence layer clients, and their associated data models (API DTOs for requests and responses).</li> </ul>"}]}