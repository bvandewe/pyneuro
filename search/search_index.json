{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Neuroglia Python Framework","text":"<p>The framework is a very thin software layer built on top of FastAPI that provides developers with a set of coding features and tools that may be useful for any microservice (regardless of its role and domain/bounded context), such as:</p> <ul> <li>Implements all guidelines from https://12factor.net</li> <li>MVC Web App builder with fundamental abstractions</li> <li>Simple Dependency Injection mechanism, including automatic class discovery and instantiation</li> <li>Class-based API controller with automatic module discovery</li> <li>Modular Command/Query responsibility segregation</li> <li>Optional Event-sourcing for event-driven Domain modeling</li> <li>Clean layered Code https://levelup.gitconnected.com/clean-architecture-86c4f03e4771</li> <li>Pure Domain models, independent of persistence</li> <li>Application handlers (Command, Queries, Events, Tasks)</li> <li>Repository pattern</li> <li>Independent API controllers, endpoints and models (DTO's) vs Domain models and logic</li> <li>Native async Events ingestion, handling, emission (JSON CloudEvent) using ReactiveX programming with RxPy</li> <li>Data models mapping between Domain and Integration</li> <li>Easy extension for background task scheduling with apscheduler</li> <li>etc...</li> </ul> <p>The code typically includes comments that help understand it.</p> <p>The <code>src/main.py</code> file is the entry point that defines all dependencies, including the sub-folders where to dynamically load the API, Application, Persistence and Domain layers.</p> <p>In turn, when booting, the web app dynamically discovers, identifies and instantiate dependencies then loads:</p> <ul> <li>API controllers and define the mapping between each endpoint and its corresponding Application handler</li> <li>Application handlers (incl. Commands, Queries, Events, Tasks) and services (any business logic)</li> <li>Integration dependencies (any API client service, persistence-layer clients, ) and models (API' DTO for requests and responses)</li> </ul>"}]}